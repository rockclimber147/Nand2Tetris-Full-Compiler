@256
D=A
@0
M=D
@1
MD=-1
@2
MD=D-1
@3
MD=D-1
@4
MD=D-1
@Sys.init$ret.0
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
      // /* Declare field variables */
      // /*
      // FIELD  int x -> this     0
      // FIELD  int y -> this     1
      // */
      // /* set x to an arbitrary expression */
      // 
      // function Test.new 0
(Test.new)
@0
D=M
@1
M=D
      // /*
      // ARG    int Ax -> argument 0
      // ARG    int Ay -> argument 1
      // ARG    int Az -> argument 2
      // */
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.1
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.1)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // call Math.multiply 2
@Math.multiply$ret.2
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.2)
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // /* set y to the second argument */
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // /* constructors must return the instance they constructed */
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /* returns the sum of the field variables */
      // 
      // function Test.getSum 0
(Test.getSum)
@0
D=M
@1
M=D
      // /*
      // ARG    Test this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /* Sets the x field variable */
      // 
      // function Test.setX 0
(Test.setX)
@0
D=M
@1
M=D
      // /*
      // ARG    Test this -> argument 0
      // ARG    int  newX -> argument 1
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
