@256
D=A
@0
M=D
@1
MD=-1
@2
MD=D-1
@3
MD=D-1
@4
MD=D-1
@Sys.init$ret.0
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
      // /** Initializes a new Square Dance game and starts running it. *//*
      // STATIC boolean test -> static   0
      // */
      // 
      // function Main.main 1
(Main.main)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
      // /*
      // VAR    SquareGame game -> local    0
      // */
      // call SquareGame.new 0
@SquareGame.new$ret.1
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@SquareGame.new
0;JMP
(SquareGame.new$ret.1)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call SquareGame.run 1
@SquareGame.run$ret.2
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@SquareGame.run
0;JMP
(SquareGame.run$ret.2)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call SquareGame.dispose 1
@SquareGame.dispose$ret.3
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@SquareGame.dispose
0;JMP
(SquareGame.dispose$ret.3)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // 
      // function Main.more 4
(Main.more)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
      // /*
      // VAR    int    i -> local    0
      // VAR    int    j -> local    1
      // VAR    String s -> local    2
      // VAR    Array  a -> local    3
      // */
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // if-goto Main.more_FALSE_0
@0
AM=M-1
D=M
@Main.more_FALSE_0
D;JNE
      // push constant 15
@15
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.new 1
@String.new$ret.4
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.new
0;JMP
(String.new$ret.4)
      // push constant 115
@115
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.5
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.5)
      // push constant 116
@116
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.6
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.6)
      // push constant 114
@114
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.7
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.7)
      // push constant 105
@105
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.8
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.8)
      // push constant 110
@110
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.9
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.9)
      // push constant 103
@103
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.10
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.10)
      // push constant 32
@32
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.11
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.11)
      // push constant 99
@99
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.12
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.12)
      // push constant 111
@111
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.13
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.13)
      // push constant 110
@110
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.14
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.14)
      // push constant 115
@115
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.15
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.15)
      // push constant 116
@116
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.16
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.16)
      // push constant 97
@97
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.17
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.17)
      // push constant 110
@110
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.18
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.18)
      // push constant 116
@116
D=A
@0
A=M
M=D
@0
M=M+1
      // call String.appendChar 2
@String.appendChar$ret.19
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@String.appendChar
0;JMP
(String.appendChar$ret.19)
      // pop local 2
@2
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 2
@2
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push local 3
@3
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop pointer 1
@0
AM=M-1
D=M
@4
M=D
      // push that 0
@0
D=A
@4
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // pop pointer 1
@0
AM=M-1
D=M
@4
M=D
      // push temp 0
@0
D=A
@5
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop that 0
@0
D=A
@4
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Main.more_TRUE_0
@Main.more_TRUE_0
0;JMP
      // label Main.more_FALSE_0
(Main.more_FALSE_0)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Math.multiply 2
@Math.multiply$ret.20
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.multiply
0;JMP
(Math.multiply$ret.20)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Math.divide 2
@Math.divide$ret.21
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@7
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Math.divide
0;JMP
(Math.divide$ret.21)
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // or
@0
AM=M-1
D=M
A=A-1
M=M|D
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label Main.more_TRUE_0
(Main.more_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





      // /** Implements a graphical square. *//** Constructs a new square with a given location and size. *//*
      // FIELD  int x    -> this     0
      // FIELD  int y    -> this     1
      // FIELD  int size -> this     2
      // */
      // 
      // function Square.new 0
(Square.new)
@0
D=M
@1
M=D
      // /*
      // ARG    int Ax    -> argument 0
      // ARG    int Ay    -> argument 1
      // ARG    int Asize -> argument 2
      // */
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.22
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.22)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 1
@1
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push argument 2
@2
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.draw 1
@Square.draw$ret.23
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.draw
0;JMP
(Square.draw$ret.23)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Disposes this square. */
      // function Square.dispose 0
(Square.dispose)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Memory.deAlloc 1
@Memory.deAlloc$ret.24
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.24)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Draws the square on the screen. */
      // function Square.draw 0
(Square.draw)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.25
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.25)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.26
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.26)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Erases the square from the screen. */
      // function Square.erase 0
(Square.erase)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.27
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.27)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.28
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.28)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Increments the square size by 2 pixels. */
      // function Square.incSize 0
(Square.incSize)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 254
@254
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T0
D;JLT
@0
A=M-1
M=0
(T0)
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 510
@510
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T1
D;JLT
@0
A=M-1
M=0
(T1)
      // and
@0
AM=M-1
D=M
A=A-1
M=M&D
      // not
@0
A=M-1
M=!M
      // if-goto Square.incSize_FALSE_0
@0
AM=M-1
D=M
@Square.incSize_FALSE_0
D;JNE
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.erase 1
@Square.erase$ret.29
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.erase
0;JMP
(Square.erase$ret.29)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.draw 1
@Square.draw$ret.30
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.draw
0;JMP
(Square.draw$ret.30)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.incSize_TRUE_0
@Square.incSize_TRUE_0
0;JMP
      // label Square.incSize_FALSE_0
(Square.incSize_FALSE_0)
      // label Square.incSize_TRUE_0
(Square.incSize_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Decrements the square size by 2 pixels. */
      // function Square.decSize 0
(Square.decSize)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T2
D;JGT
@0
A=M-1
M=0
(T2)
      // not
@0
A=M-1
M=!M
      // if-goto Square.decSize_FALSE_0
@0
AM=M-1
D=M
@Square.decSize_FALSE_0
D;JNE
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.erase 1
@Square.erase$ret.31
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.erase
0;JMP
(Square.erase$ret.31)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 2
@2
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.draw 1
@Square.draw$ret.32
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.draw
0;JMP
(Square.draw$ret.32)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.decSize_TRUE_0
@Square.decSize_TRUE_0
0;JMP
      // label Square.decSize_FALSE_0
(Square.decSize_FALSE_0)
      // label Square.decSize_TRUE_0
(Square.decSize_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the square up by 2 pixels. */
      // function Square.moveUp 0
(Square.moveUp)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T3
D;JGT
@0
A=M-1
M=0
(T3)
      // not
@0
A=M-1
M=!M
      // if-goto Square.moveUp_FALSE_0
@0
AM=M-1
D=M
@Square.moveUp_FALSE_0
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.33
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.33)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.34
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.34)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.35
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.35)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.36
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.36)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.moveUp_TRUE_0
@Square.moveUp_TRUE_0
0;JMP
      // label Square.moveUp_FALSE_0
(Square.moveUp_FALSE_0)
      // label Square.moveUp_TRUE_0
(Square.moveUp_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the square down by 2 pixels. */
      // function Square.moveDown 0
(Square.moveDown)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 254
@254
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T4
D;JLT
@0
A=M-1
M=0
(T4)
      // not
@0
A=M-1
M=!M
      // if-goto Square.moveDown_FALSE_0
@0
AM=M-1
D=M
@Square.moveDown_FALSE_0
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.37
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.37)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.38
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.38)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.39
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.39)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.40
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.40)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.moveDown_TRUE_0
@Square.moveDown_TRUE_0
0;JMP
      // label Square.moveDown_FALSE_0
(Square.moveDown_FALSE_0)
      // label Square.moveDown_TRUE_0
(Square.moveDown_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the square left by 2 pixels. */
      // function Square.moveLeft 0
(Square.moveLeft)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // gt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T5
D;JGT
@0
A=M-1
M=0
(T5)
      // not
@0
A=M-1
M=!M
      // if-goto Square.moveLeft_FALSE_0
@0
AM=M-1
D=M
@Square.moveLeft_FALSE_0
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.41
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.41)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.42
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.42)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.43
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.43)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.44
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.44)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.moveLeft_TRUE_0
@Square.moveLeft_TRUE_0
0;JMP
      // label Square.moveLeft_FALSE_0
(Square.moveLeft_FALSE_0)
      // label Square.moveLeft_TRUE_0
(Square.moveLeft_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the square right by 2 pixels. */
      // function Square.moveRight 0
(Square.moveRight)
@0
D=M
@1
M=D
      // /*
      // ARG    Square this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 510
@510
D=A
@0
A=M
M=D
@0
M=M+1
      // lt
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T6
D;JLT
@0
A=M-1
M=0
(T6)
      // not
@0
A=M-1
M=!M
      // if-goto Square.moveRight_FALSE_0
@0
AM=M-1
D=M
@Square.moveRight_FALSE_0
D;JNE
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // call Screen.setColor 1
@Screen.setColor$ret.45
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.45)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.46
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.46)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // call Screen.setColor 1
@Screen.setColor$ret.47
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.setColor
0;JMP
(Screen.setColor$ret.47)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // sub
@0
AM=M-1
D=M
A=A-1
M=M-D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push this 2
@2
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // add
@0
AM=M-1
D=M
A=A-1
M=M+D
      // call Screen.drawRectangle 4
@Screen.drawRectangle$ret.48
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@9
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Screen.drawRectangle
0;JMP
(Screen.drawRectangle$ret.48)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto Square.moveRight_TRUE_0
@Square.moveRight_TRUE_0
0;JMP
      // label Square.moveRight_FALSE_0
(Square.moveRight_FALSE_0)
      // label Square.moveRight_TRUE_0
(Square.moveRight_TRUE_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





      // /**
      // * Implements the Square Dance game.
      // * This simple game allows the user to move a black square around
      // * the screen, and change the square's size during the movement.
      // * When the game starts, a square of 30 by 30 pixels is shown at the
      // * top-left corner of the screen. The user controls the square as follows.
      // * The 4 arrow keys are used to move the square up, down, left, and right.
      // * The 'z' and 'x' keys are used, respectively, to decrement and increment
      // * the square's size. The 'q' key is used to quit the game.
      // *//** Constructs a new Square Game. *//*
      // FIELD  Square square    -> this     0
      // FIELD  int    direction -> this     1
      // */
      // 
      // function SquareGame.new 0
(SquareGame.new)
@0
D=M
@1
M=D
      // /*
      // */
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // call Memory.alloc 1
@Memory.alloc$ret.49
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.alloc
0;JMP
(Memory.alloc$ret.49)
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // push constant 30
@30
D=A
@0
A=M
M=D
@0
M=M+1
      // call Square.new 3
@Square.new$ret.50
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@8
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.new
0;JMP
(Square.new$ret.50)
      // pop this 0
@0
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Disposes this game. */
      // function SquareGame.dispose 0
(SquareGame.dispose)
@0
D=M
@1
M=D
      // /*
      // ARG    SquareGame this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.dispose 1
@Square.dispose$ret.51
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.dispose
0;JMP
(Square.dispose$ret.51)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call Memory.deAlloc 1
@Memory.deAlloc$ret.52
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Memory.deAlloc
0;JMP
(Memory.deAlloc$ret.52)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Moves the square in the current direction. */
      // function SquareGame.moveSquare 0
(SquareGame.moveSquare)
@0
D=M
@1
M=D
      // /*
      // ARG    SquareGame this -> argument 0
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T7
D;JEQ
@0
A=M-1
M=0
(T7)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.moveSquare_FALSE_0
@0
AM=M-1
D=M
@SquareGame.moveSquare_FALSE_0
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.moveUp 1
@Square.moveUp$ret.53
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.moveUp
0;JMP
(Square.moveUp$ret.53)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.moveSquare_TRUE_0
@SquareGame.moveSquare_TRUE_0
0;JMP
      // label SquareGame.moveSquare_FALSE_0
(SquareGame.moveSquare_FALSE_0)
      // label SquareGame.moveSquare_TRUE_0
(SquareGame.moveSquare_TRUE_0)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T8
D;JEQ
@0
A=M-1
M=0
(T8)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.moveSquare_FALSE_1
@0
AM=M-1
D=M
@SquareGame.moveSquare_FALSE_1
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.moveDown 1
@Square.moveDown$ret.54
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.moveDown
0;JMP
(Square.moveDown$ret.54)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.moveSquare_TRUE_1
@SquareGame.moveSquare_TRUE_1
0;JMP
      // label SquareGame.moveSquare_FALSE_1
(SquareGame.moveSquare_FALSE_1)
      // label SquareGame.moveSquare_TRUE_1
(SquareGame.moveSquare_TRUE_1)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T9
D;JEQ
@0
A=M-1
M=0
(T9)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.moveSquare_FALSE_2
@0
AM=M-1
D=M
@SquareGame.moveSquare_FALSE_2
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.moveLeft 1
@Square.moveLeft$ret.55
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.moveLeft
0;JMP
(Square.moveLeft$ret.55)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.moveSquare_TRUE_2
@SquareGame.moveSquare_TRUE_2
0;JMP
      // label SquareGame.moveSquare_FALSE_2
(SquareGame.moveSquare_FALSE_2)
      // label SquareGame.moveSquare_TRUE_2
(SquareGame.moveSquare_TRUE_2)
      // push this 1
@1
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T10
D;JEQ
@0
A=M-1
M=0
(T10)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.moveSquare_FALSE_3
@0
AM=M-1
D=M
@SquareGame.moveSquare_FALSE_3
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.moveRight 1
@Square.moveRight$ret.56
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.moveRight
0;JMP
(Square.moveRight$ret.56)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.moveSquare_TRUE_3
@SquareGame.moveSquare_TRUE_3
0;JMP
      // label SquareGame.moveSquare_FALSE_3
(SquareGame.moveSquare_FALSE_3)
      // label SquareGame.moveSquare_TRUE_3
(SquareGame.moveSquare_TRUE_3)
      // push constant 5
@5
D=A
@0
A=M
M=D
@0
M=M+1
      // call Sys.wait 1
@Sys.wait$ret.57
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.wait
0;JMP
(Sys.wait$ret.57)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
      // /** Runs the game: handles the user's inputs and moves the square accordingly */
      // function SquareGame.run 2
(SquareGame.run)
@0
D=M
@1
M=D
@0
A=M
M=0
@0
M=M+1
@0
A=M
M=0
@0
M=M+1
      // /*
      // ARG    SquareGame this -> argument 0
      // VAR    char       key  -> local    0
      // VAR    boolean    exit -> local    1
      // */
      // push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // pop pointer 0
@0
AM=M-1
D=M
@3
M=D
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // label SquareGame.run_LOOP_START_0
(SquareGame.run_LOOP_START_0)
      // push local 1
@1
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_LOOP_END_0
@0
AM=M-1
D=M
@SquareGame.run_LOOP_END_0
D;JNE
      // label SquareGame.run_LOOP_START_1
(SquareGame.run_LOOP_START_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T11
D;JEQ
@0
A=M-1
M=0
(T11)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_LOOP_END_1
@0
AM=M-1
D=M
@SquareGame.run_LOOP_END_1
D;JNE
      // call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret.58
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret.58)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call SquareGame.moveSquare 1
@SquareGame.moveSquare$ret.59
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@SquareGame.moveSquare
0;JMP
(SquareGame.moveSquare$ret.59)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_LOOP_START_1
@SquareGame.run_LOOP_START_1
0;JMP
      // label SquareGame.run_LOOP_END_1
(SquareGame.run_LOOP_END_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 81
@81
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T12
D;JEQ
@0
A=M-1
M=0
(T12)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_0
@0
AM=M-1
D=M
@SquareGame.run_FALSE_0
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // neg
@0
A=M-1
M=-M
      // pop local 1
@1
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_0
@SquareGame.run_TRUE_0
0;JMP
      // label SquareGame.run_FALSE_0
(SquareGame.run_FALSE_0)
      // label SquareGame.run_TRUE_0
(SquareGame.run_TRUE_0)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 90
@90
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T13
D;JEQ
@0
A=M-1
M=0
(T13)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_1
@0
AM=M-1
D=M
@SquareGame.run_FALSE_1
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.decSize 1
@Square.decSize$ret.60
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.decSize
0;JMP
(Square.decSize$ret.60)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_1
@SquareGame.run_TRUE_1
0;JMP
      // label SquareGame.run_FALSE_1
(SquareGame.run_FALSE_1)
      // label SquareGame.run_TRUE_1
(SquareGame.run_TRUE_1)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 88
@88
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T14
D;JEQ
@0
A=M-1
M=0
(T14)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_2
@0
AM=M-1
D=M
@SquareGame.run_FALSE_2
D;JNE
      // push this 0
@0
D=A
@3
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // call Square.incSize 1
@Square.incSize$ret.61
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Square.incSize
0;JMP
(Square.incSize$ret.61)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_2
@SquareGame.run_TRUE_2
0;JMP
      // label SquareGame.run_FALSE_2
(SquareGame.run_FALSE_2)
      // label SquareGame.run_TRUE_2
(SquareGame.run_TRUE_2)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 131
@131
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T15
D;JEQ
@0
A=M-1
M=0
(T15)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_3
@0
AM=M-1
D=M
@SquareGame.run_FALSE_3
D;JNE
      // push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_3
@SquareGame.run_TRUE_3
0;JMP
      // label SquareGame.run_FALSE_3
(SquareGame.run_FALSE_3)
      // label SquareGame.run_TRUE_3
(SquareGame.run_TRUE_3)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 133
@133
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T16
D;JEQ
@0
A=M-1
M=0
(T16)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_4
@0
AM=M-1
D=M
@SquareGame.run_FALSE_4
D;JNE
      // push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_4
@SquareGame.run_TRUE_4
0;JMP
      // label SquareGame.run_FALSE_4
(SquareGame.run_FALSE_4)
      // label SquareGame.run_TRUE_4
(SquareGame.run_TRUE_4)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 130
@130
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T17
D;JEQ
@0
A=M-1
M=0
(T17)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_5
@0
AM=M-1
D=M
@SquareGame.run_FALSE_5
D;JNE
      // push constant 3
@3
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_5
@SquareGame.run_TRUE_5
0;JMP
      // label SquareGame.run_FALSE_5
(SquareGame.run_FALSE_5)
      // label SquareGame.run_TRUE_5
(SquareGame.run_TRUE_5)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 132
@132
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T18
D;JEQ
@0
A=M-1
M=0
(T18)
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_FALSE_6
@0
AM=M-1
D=M
@SquareGame.run_FALSE_6
D;JNE
      // push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
      // pop this 1
@1
D=A
@3
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_TRUE_6
@SquareGame.run_TRUE_6
0;JMP
      // label SquareGame.run_FALSE_6
(SquareGame.run_FALSE_6)
      // label SquareGame.run_TRUE_6
(SquareGame.run_TRUE_6)
      // label SquareGame.run_LOOP_START_3
(SquareGame.run_LOOP_START_3)
      // push local 0
@0
D=A
@1
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1
      // eq
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T19
D;JEQ
@0
A=M-1
M=0
(T19)
      // not
@0
A=M-1
M=!M
      // not
@0
A=M-1
M=!M
      // if-goto SquareGame.run_LOOP_END_3
@0
AM=M-1
D=M
@SquareGame.run_LOOP_END_3
D;JNE
      // call Keyboard.keyPressed 0
@Keyboard.keyPressed$ret.62
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Keyboard.keyPressed
0;JMP
(Keyboard.keyPressed$ret.62)
      // pop local 0
@0
D=A
@1
D=D+M
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // push pointer 0
@3
D=M
@0
A=M
M=D
@0
M=M+1
      // call SquareGame.moveSquare 1
@SquareGame.moveSquare$ret.63
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@SquareGame.moveSquare
0;JMP
(SquareGame.moveSquare$ret.63)
      // pop temp 0
@0
D=A
@5
D=D+A
@R13
M=D
@0
AM=M-1
D=M
@R13
A=M
M=D
      // goto SquareGame.run_LOOP_START_3
@SquareGame.run_LOOP_START_3
0;JMP
      // label SquareGame.run_LOOP_END_3
(SquareGame.run_LOOP_END_3)
      // goto SquareGame.run_LOOP_START_0
@SquareGame.run_LOOP_START_0
0;JMP
      // label SquareGame.run_LOOP_END_0
(SquareGame.run_LOOP_END_0)
      // push constant 0
@0
D=A
@0
A=M
M=D
@0
M=M+1





